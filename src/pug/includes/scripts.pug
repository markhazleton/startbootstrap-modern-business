// Bootstrap core JS
script(src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js')

// Core theme JS
script(src='js/scripts.min.js')
script.
  // Bootstrap 5 light/dark mode toggle
  (() => {
    const toggle = document.getElementById('theme-toggle');
    const icon = toggle?.querySelector('i');
    const setTheme = (theme) => {
      document.documentElement.setAttribute('data-bs-theme', theme);
      localStorage.setItem('bs-theme', theme);
      if (icon) {
        icon.className = theme === 'dark' ? 'bi bi-sun' : 'bi bi-moon';
      }
    };
    const stored = localStorage.getItem('bs-theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    setTheme(stored || (prefersDark ? 'dark' : 'light'));
    toggle?.addEventListener('click', () => {
      const current = document.documentElement.getAttribute('data-bs-theme');
      setTheme(current === 'dark' ? 'light' : 'dark');
    });
  })();

script.
  // Theme Customizer logic
  (() => {
    const customizer = document.querySelector('.theme-customizer');
    const colorPicker = document.getElementById('colorPicker');
    const fontSelect = document.getElementById('fontSelect');
    const radiusRange = document.getElementById('radiusRange');
    const exportBtn = document.getElementById('exportTheme');
    const closeBtn = document.getElementById('closeCustomizer');
    if (!customizer) return;
    // Apply theme
    function applyTheme() {
      document.documentElement.style.setProperty('--bs-primary', colorPicker.value);
      document.body.style.fontFamily = fontSelect.value;
      document.documentElement.style.setProperty('--bs-border-radius', radiusRange.value + 'rem');
    }
    colorPicker?.addEventListener('input', applyTheme);
    fontSelect?.addEventListener('change', applyTheme);
    radiusRange?.addEventListener('input', applyTheme);
    exportBtn?.addEventListener('click', () => {
      const css = `:root { --bs-primary: ${colorPicker.value}; --bs-border-radius: ${radiusRange.value}rem; font-family: ${fontSelect.value}; }`;
      const blob = new Blob([css], {type: 'text/css'});
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = 'custom-theme.css';
      a.click();
    });
    closeBtn?.addEventListener('click', () => customizer.style.display = 'none');
    // Show on load
    customizer.style.display = 'block';
    applyTheme();
  })();

script.
  // Animated counters
  document.querySelectorAll('.counter').forEach(counter => {
    const update = () => {
      const target = counter.getAttribute('data-count');
      if (target.includes('/')) { counter.textContent = target; return; }
      const count = +counter.textContent;
      const inc = Math.ceil((+target - count) / 10);
      if (count < target) {
        counter.textContent = count + inc;
        setTimeout(update, 40);
      } else {
        counter.textContent = target;
      }
    };
    update();
  });

script.
  // Accessibility widget logic
  (() => {
    const inc = document.getElementById('fontInc');
    const dec = document.getElementById('fontDec');
    const contrast = document.getElementById('contrast');
    const dyslexia = document.getElementById('dyslexia');
    let fontSize = 1;
    inc?.addEventListener('click', () => {
      fontSize += 0.1;
      document.body.style.fontSize = fontSize + 'em';
    });
    dec?.addEventListener('click', () => {
      fontSize = Math.max(0.8, fontSize - 0.1);
      document.body.style.fontSize = fontSize + 'em';
    });
    contrast?.addEventListener('click', () => {
      document.body.classList.toggle('high-contrast');
    });
    dyslexia?.addEventListener('click', () => {
      document.body.classList.toggle('dyslexia-font');
    });
  })();
